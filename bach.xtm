(sys:load "libs/core/instruments.xtm")

(make-instrument synth fmsynth)

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (synth in time chan dat)))
(dsp:set! dsp)


; hello world as a list of note pitches
; transposed down two octaves (24 semitones)
(define melody (map (lambda (c)
                       (- (char->integer c) 24))
                    (string->list "Hello World!")))

; Define a recursive function to cycle through the pitches in melody
(define loop
   (lambda (time pitch-list)
      (cond (
        (null? pitch-list) (println 'done))
        (else
              (play-note time synth (car pitch-list) 80 10000)
              (callback (+ time (* *second* 0.25)) 'loop  (+ time (* *second* 0.25)) (cdr pitch-list))))))

; start playing melody
(loop (now) melody)


(define a 57)
(define b 59)
(define c 60)
(define d 62)
(define e 64)
(define f 65)
(define f# 66)
(define g 67)


(loop (now) '(60 60 60 60 60 60 60 60))

(define jesu
  (list g a b d c c e d d g f# g d b g a b c d e d c b a b g f# g a d f# a c b a b g a b d c c f# d d g f# g d b g a b e d c b a g d g f# g b d g d b g b d))

(define jesu2 (map (lambda (x) (+ x 2)) jesu))


(length jesu-joy-of-mans-desiring)

(loop (now) jesu)

(loop (now) jesu2)

(println *second*)


(loop (now) )