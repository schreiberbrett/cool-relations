#lang racket

(include "../../CodeFromTheReasonedSchemer2ndEd/trs2-impl.scm")
(include "../../CodeFromTheReasonedSchemer2ndEd/trs2-arith.scm")

(defrel (lengtho₁ l n)
  (conde ((== l '()) (== n '()))
         ((fresh (a d n-1)
                 (== l `(,a . ,d))
                 (pluso n-1 '(1) n)
                 (lengtho₁ d n-1)))))

(defrel (lengtho₂ l n)
  (conde ((== l '()) (== n '()))
         ((fresh (a d n-1)
                 (== l `(,a . ,d))
                 (pluso '(1) n-1 n)
                 (lengtho₂ d n-1)))))

(defrel (pairo l)
  (fresh (a d)
         (== l `(,a . ,d))))

#;(run 2 (q) (lengtho₃ '(a b c d) '(0 0 1)))

(defrel (double-lengtho l 2l)
  (conde ((== l '()) (== 2l '()))
         ((fresh (x y z d 2d)
                 (== l `(,x . ,d))
                 (== 2l `(,y ,z . ,2d))
                 (double-lengtho d 2d)))))

(defrel (double-length-plus-oneo l 1+2l)
  (fresh (plus-one 2l)
         (== 1+2l `(,plus-one . ,2l))
         (double-lengtho l 2l)))

(defrel (lengtho₃ l n)
  (fresh (d rec)
         (conde ((== n '()) (== l '()))
                             
                ((== n `(0 . ,d))
                 (pairo d)
                 (lengtho₃ rec d)
                 (double-lengtho rec l))
                              
                ((== n `(1 . ,d))
                 (lengtho₃ rec d)
                 (double-length-plus-oneo rec l)))))

(defrel (lengtho₄ l n)
  (conde ((== n '()) (== l '()))
         ((fresh (a d plus-one rec 2rec)
                 (== n `(,a . ,d))
                 
                 (conde ((== a 0) (pairo d) (== l 2rec))
                        ((== a 1) (== l `(,plus-one . ,2rec))))

                 (lengtho₄ rec d)
                 (double-lengtho rec 2rec)))))

(defrel (+1o n n+1)
  (conde ((== n '()) (== n+1 '(1)))
         ((fresh (b m m+1)
                 (== n `(,b . ,m))
                 (conde ((== b 0) (== n+1 `(1 . ,m)))
                        ((== b 1) (== n+1 `(0 . ,m+1)) (+1o m m+1)))))))

(defrel (lengtho₅ l n)
  (conde ((== l '()) (== n '()))
         ((fresh (a d n-1)
                 (== l `(,a . ,d))
                 (+1o n-1 n)
                 (lengtho₅ d n-1)))))

(defrel (ទo l n n+1)
  (conde ((== l '()) (== n '()) (== n+1 '(1)))
         ((fresh (a d n-1 b m m+1)
                 (== l `(,a . ,d))
                 (== n `(,b . ,m))
                 (conde ((== b 0) (== n+1 `(1  . ,m)))
                        ((== b 1) (== n+1 `(0 . ,m+1)) (+1o m m+1)))
                 (ទo d n-1 n)))))

(defrel (lengtho-impure l n)
  (listo l)
  (project (l)
           (== n (build-num (length l)))))

(defrel (lengtho-impure2 l n)
  (listo l)
  (olego n)
  (project (l n)
           (== n (build-num (length l)))
           (== (unbuild-num n) (length l))))  

(define ((lengtho-impure3 l n) s)
  (let ((l (walk* l s))
        (n (walk* n s)))
    (cond ((list? l) (λ () ((== (build-num (length l)) n) s)))
          ((oleg? n) (λ () ((same-lengtho l (range (unbuild-num n))) s)))
          (else (λ () ((lengtho₅ l n) s))))))

(defrel (same-lengtho l1 l2)
  (conde ((== l1 '()) (== l2 '()))
         ((fresh (a1 a2 d1 d2)
                 (== l1 `(,a1 . ,d1))
                 (== l2 `(,a2 . ,d2))
                 (same-lengtho d1 d2)))))

(defrel (listo l)
  (conde ((== l '()))
         ((fresh (a d)
                 (== l `(,a . ,d))
                 (listo d)))))

(define (oleg? n)
  (or (null? n)
      (and (pair? n)
           (or (equal? (car n) 0)
               (equal? (car n) 1))
           (oleg? (cdr n)))))

(defrel (olego n)
  (conde ((== n '()))
         ((fresh (a d)
                 (== n `(,a . ,d))
                 (conde ((== a 0) (pairo d))
                        ((== a 1)))
                 (olego d)))))


(define (unbuild-num n)
  (cond ((null? n) 0)
        ((equal? (car n) 0) (* 2 (unbuild-num (cdr n))))
        (else (+ 1 (* 2 (unbuild-num (cdr n)))))))

(define (benchmark-both-ground num)
  (cons (number->string num)
        (map (λ (lengtho)
               (let-values (((results cpu real gc)
                             (time-apply (λ (l n) (run* (q) (lengtho l n))) (list (range num) (build-num num)))))
                 (number->string cpu)))
             (list lengtho₁ lengtho₂ lengtho₃ lengtho₄))))

(define (benchmark-l-ground num)
  (cons (number->string num)
        (map (λ (lengtho)
               (let-values (((results cpu real gc)
                             (time-apply (λ (n) (run* (l) (lengtho l n))) (list (range num)))))
                 (number->string cpu)))
             (list lengtho₁ lengtho₂ lengtho₃ lengtho₄))))