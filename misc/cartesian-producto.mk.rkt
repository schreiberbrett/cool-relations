#lang racket

(include "../../CodeFromTheReasonedSchemer2ndEd/trs2-impl.scm")

#;(defrel (cross-producto l₁ l₂ l₁×l₂)
    (conde ((== l₁ '()) (== l₁×l₂ '()))
           ((fresh (a₁ d₁ d₁×l₂ fusion)
                   (== l₁ `(,a₁ . ,d₁))
                   (fuseo a₁ l₂ fusion)
                   (appendo fusion d₁×l₂ l₁×l₂)
                   (cross-producto d₁ l₂ d₁×l₂)))))

(defrel (fuseo sym l o)
  (conde ((== l '()) (== o '()))
         ((fresh (a d rec)
                 (== l `(,a . ,d))
                 (== o `((,sym ,a) . ,rec))
                 (fuseo sym d rec)))))

(defrel (appendo l r o)
  (conde ((== l '()) (== r o))
         ((fresh (a d rec)
                 (== l `(,a . ,d))
                 (== o `(,a . ,rec))
                 (appendo d r rec)))))

#;(defrel (cross-producto l₁ l₂ l₁×l₂)
    (conde ((== l₁ '()) (== l₁×l₂ '()))
           ((== l₂ '()) (== l₁×l₂ '()))
           ((fresh (a₁ d₁ a₂ d₂ d₁×l₂ fusion)
                   (== l₁ `(,a₁ . ,d₁))
                   (== l₂ `(,a₂ . ,d₂))
                   (fuseo a₁ l₂ fusion)
                   (appendo fusion d₁×l₂ l₁×l₂)
                   (cross-producto d₁ l₂ d₁×l₂)))))

(defrel (fuse-and-appendo sym l r o)
  (conde ((== l '()) (== r o))
         ((fresh (a d rec)
                 (== l `(,a . ,d))
                 (== o `((,sym ,a) . ,rec))
                 (fuse-and-appendo sym d r rec)))))

(defrel (cross-producto l₁ l₂ l₁×l₂)
  (conde ((== l₁ '()) (== l₁×l₂ '()))
         ((== l₂ '()) (== l₁×l₂ '()))
         ((fresh (a₁ d₁ a₂ d₂ d₁×l₂ fusion)
                 (== l₁ `(,a₁ . ,d₁))
                 (== l₂ `(,a₂ . ,d₂))
                 (fuse-and-appendo a₁ l₂ d₁×l₂ l₁×l₂)
                 (cross-producto d₁ l₂ d₁×l₂)))))